{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SwipeListView } from \"react-native-swipe-list-view\";\nimport { ListView, ListViewHidden, TodoText, TodoDate, SwipedTodoText, colors, HiddenButton } from \"../styles/appStyles\";\nimport { Entypo } from \"@expo/vector-icons\";\n\nvar ListItems = function ListItems(_ref) {\n  var todos = _ref.todos,\n      setTodos = _ref.setTodos,\n      handleTriggerEdit = _ref.handleTriggerEdit;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      swipedRow = _useState2[0],\n      setSwipedRow = _useState2[1];\n\n  var handleDeleteTodo = function handleDeleteTodo(rowMap, rowKey) {\n    var newTodos = _toConsumableArray(todos);\n\n    var todoIndex = todos.findIndex(function (todo) {\n      return todo.key === rowKey;\n    });\n    newTodos.splice(todoIndex, 1);\n    setTodos(newTodos);\n  };\n\n  return React.createElement(React.Fragment, null, todos.length === 0 && React.createElement(TodoText, null, \"You have no todos today\"), todos.length != 0 && React.createElement(SwipeListView, {\n    data: todos,\n    renderItem: function renderItem(data) {\n      var RowText = data.item.key === swipedRow ? SwipedTodoText : TodoText;\n      return React.createElement(ListView, {\n        underlayColor: colors.primary,\n        onPress: function onPress() {\n          handleTriggerEdit(data.item);\n        }\n      }, React.createElement(React.Fragment, null, React.createElement(RowText, null, data.item.title), React.createElement(TodoDate, null, data.item.date)));\n    },\n    renderHiddenItem: function renderHiddenItem(data, rowMap) {\n      return React.createElement(ListViewHidden, null, React.createElement(HiddenButton, {\n        onPress: function onPress() {\n          return handleDeleteTodo(rowMap, data.item.key);\n        }\n      }, React.createElement(Entypo, {\n        name: \"trash\",\n        size: 25,\n        color: colors.secondary\n      })));\n    },\n    leftOpenValue: 80,\n    previewRowKey: \"1\",\n    previewOpenValue: 80,\n    previewOpenDelay: 3000,\n    disableLeftSwipe: true,\n    showsVerticalScrollIndicator: false,\n    style: {\n      flex: 1,\n      paddingBottom: 30,\n      marginBottom: 40\n    },\n    onRowOpen: function onRowOpen(rowKey) {\n      return setSwipedRow(rowKey);\n    },\n    onRowClose: function onRowClose() {\n      return setSwipedRow(null);\n    }\n  }));\n};\n\nexport default ListItems;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["C:/Users/Vanzyle/OneDrive - EY/Desktop/Projects/ToDoApp/frontend/components/ListItems.js"],"names":["React","useState","SwipeListView","ListView","ListViewHidden","TodoText","TodoDate","SwipedTodoText","colors","HiddenButton","Entypo","ListItems","todos","setTodos","handleTriggerEdit","swipedRow","setSwipedRow","handleDeleteTodo","rowMap","rowKey","newTodos","todoIndex","findIndex","todo","key","splice","length","data","RowText","item","primary","title","date","secondary","flex","paddingBottom","marginBottom","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport { SwipeListView } from \"react-native-swipe-list-view\";\r\nimport {\r\n  ListView,\r\n  ListViewHidden,\r\n  TodoText,\r\n  TodoDate,\r\n  SwipedTodoText,\r\n  colors,\r\n  HiddenButton,\r\n} from \"../styles/appStyles\";\r\nimport { Entypo } from \"@expo/vector-icons\";\r\n\r\nconst ListItems = ({ todos, setTodos, handleTriggerEdit }) => {\r\n  // For styling the row\r\n  const [swipedRow, setSwipedRow] = useState(null);\r\n\r\n  const handleDeleteTodo = (rowMap, rowKey) => {\r\n    const newTodos = [...todos];\r\n    const todoIndex = todos.findIndex((todo) => todo.key === rowKey);\r\n    newTodos.splice(todoIndex, 1);\r\n\r\n    setTodos(newTodos);\r\n  };\r\n  return (\r\n    <>\r\n      {todos.length === 0 && <TodoText>You have no todos today</TodoText>}\r\n      {todos.length != 0 && (\r\n        <SwipeListView\r\n          data={todos}\r\n          renderItem={(data) => {\r\n            const RowText =\r\n              data.item.key === swipedRow ? SwipedTodoText : TodoText;\r\n            return (\r\n              <ListView\r\n                underlayColor={colors.primary}\r\n                onPress={() => {\r\n                  handleTriggerEdit(data.item);\r\n                }}\r\n              >\r\n                <>\r\n                  <RowText>{data.item.title}</RowText>\r\n                  <TodoDate>{data.item.date}</TodoDate>\r\n                </>\r\n              </ListView>\r\n            );\r\n          }}\r\n          renderHiddenItem={(data, rowMap) => {\r\n            return (\r\n              <ListViewHidden>\r\n                <HiddenButton\r\n                  onPress={() => handleDeleteTodo(rowMap, data.item.key)}\r\n                >\r\n                  <Entypo name=\"trash\" size={25} color={colors.secondary} />\r\n                </HiddenButton>\r\n              </ListViewHidden>\r\n            );\r\n          }}\r\n          leftOpenValue={80}\r\n          previewRowKey={\"1\"}\r\n          previewOpenValue={80}\r\n          previewOpenDelay={3000}\r\n          disableLeftSwipe={true}\r\n          showsVerticalScrollIndicator={false}\r\n          style={{ flex: 1, paddingBottom: 30, marginBottom: 40 }}\r\n          onRowOpen={(rowKey) => setSwipedRow(rowKey)}\r\n          onRowClose={() => setSwipedRow(null)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListItems;\r\n\r\nconst styles = StyleSheet.create({});\r\n"]},"metadata":{},"sourceType":"module"}